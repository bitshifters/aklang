Anaglpyh Three-Dee Demo for Deadline 2023.
~~~

Adrian's awesome references:
~~~
http://paulbourke.net/stereographics/vpac/theory.html
http://paulbourke.net/stereographics/stereorender/

https://ubm-twvideo01.s3.amazonaws.com/o1/vault/gdc07/slides/S3729i1.pdf


Random FX ideas from before holiday
~~~
- Vector balls but monochrome dots or flying circles like Horizon demo <= DO THIS
- Text zooming towards the screen, perhaps using RISCOS font - NEED VECTOR FONT
- Checkerboards (might be too much RAM and already done this) - NO
- Physics sim like Kubric dropping cubes onto a plane
- Dot tunnel - DONE
- 3D starfield with resized sprites - DONE WITH DOTS
- Twister. Raster or line based? - NO (WELL Z TUNNEL KINDA)
- Balls bouncing towards the screen <== DO THIS
- Cubes marching towards the screen
- Y sine dots - possible to X shift not Y?
- 3D particle system, bounce off cube or sphere?
- 3D rotating line objects - YES


New random ideas
~~~
- Rollercoaster / wireframe tunnel. - MAYBE?
- 2D vector shapes coming into the screen (spinning stars) => STARTED, BUT...
- 2D vector tesselations with hidden line removal (do this in Lua) cf. Lemon glowing lines FX.
    => SORT OF, STARTED. Tunnel effect, v. slow due to clipping.
- Cracked screen effect (something flies towards camera)
- Landscape of some sort? - MAYBE IF A CONTOUR TYPE EFFECT?
- Grids?
    - Perspective grid on the 'floor' (for bouncing balls?) <== DO THIS
    - Layers of grids, rather than checkerboards.


Tech TODOs
~~~
- Branch off ArchieVerse repo. - DONE
- Placeholder music (get an old acid MOD?) - DONE NOT ACID THO.
- Decide on scripting approach
    => remove any compile time stuff.
    - Switch between FX at runtime.
    - Anything in Lua needs to be keyframed to save RAM.
    - 
- Add 3D debug commands for runtime.
    - Set eye spacing 0-9 (0=off but keeps same performance profile) - DONE
- Improve debugging tools:
    - Register vars for debug display, rather than hard coding them. - DONE
    - Fast debug plot using a baked small font, rather than OS print.
- Add new Vector balls FX:
    - Extend 3d-scene.asm. - STARTED
    - Might not need a sorting routine if plotting in mono?
    - Need fast scaled sprite plot.
        - Assume preshifted words.
        - Assume fixed size (eg. 32x32 max)
        - Assume mask only (runtime colour) => or interleave mask?
        - (Save precompiled sprites for another day)
    - At what point would we want Sarah's circle plot?
        => better for a small number of large circles...
- Improve existing 3D wireframe FX:
    - Remove overdraw of edges (currently plotting all edges per face) - DONE
    - Make line plotting correct, i.e. mask in colour bits. - DONE
    - Add new shapes and switch between them. - STARTED (ALL PTRS)
        => What shapes?
    - Support faces with a variable number of edges (currently fixed as quad)
- 3D starfield: <== STARTED
    - Hack together from all the 3d-scene and vector-balls bits.
    - Give stars some trails or display as lines?
    - Fade stars in distance.
    - Or use scaled sprites for stars? (Plot from back to front in this case).
- 3D text:
    - Could we just use a vector font? <== THIS!
    - Per width/dx plot routine that's autogenerated? - STARTED
- Homage to Cebit'90?
    - Journey into space part with simple solid 3D ship and scaled sprite stars.
    => ELITE SHIP DATA
        - Need to support polygons of different sides.
- Line draw needs screen clipping outside of inner loop.
    - Trivial reject xs<0 && xe<0 or xs>width && xe>width
    - Calculate slope dy/dx.
    - If x<0 then y+=(-x)*dy/dx and x=0.
    - If x>width then y-=(x-width)*dy/dx
    - Same for y<0 and y>height.

- Move all potting code to MODE 12? Can work on single bytes for plotting...



Introduce some skew as per the Sly 3 deck. - DONE
Pick a stereo window distance (maybe just z=0.0?)
Then introduce a skew based on this plus eye distance:
(camera_rel_z - stereo_z) > 0 when beyond, < 0 when infront and == 0 when on the coincident plane.
Anything beyond moves more left in left eye, more right in right eye.
Anything in front moves move right in left eye, more left in right eye.
Anything on the coincident plane stays where it is.
Only interested in x values, y values can all be calculated once.

(vx - cx) / (vz - cz)
cz = -80
And cx = +/-ex

Left X = (vx+ex)/(vz+80)
Right X = (vx-ex)/(vz+80)

Say vx=5 and ex=10
When vz=20 (beyond)
Lx = (5+10)/(100) = 15/100 =  0.15  => Lp=80*0.15=12    ;sx=80+12 = 92
Rx = (5-10)/(100) = -5/100 = -0.05  => Rp=80*-0.05=-4   ;sx=80-4  = 76

Project to single frustum:
Ls = 80*(Lp-ex-cx)/(0-cz) = 80*(12-10)/80 = 2
Rs = 80*(Rp+ex-cx)/(0-cz) = 80*(-4+10)/80 = 6

When vz=-20 (in front)
Lx = (15)/(60) = 0.25     => Lp=80*0.25=20              ;sx= 80+20 = 100
Rx = (-5)/(60) = -0.08333 => Rp=80*-0.08333=-6.667      ;sx= 80-6.667 = 73.3333

Project to single frustum:
Ls = 80*(Lp-ex-cx)/(0-cz) = 80*(20-10)/80 = 10
Rs = 80*(Rp+ex-cx)/(0-cz) = 80*(-6.667+10)/80 = 3.333

When vz=0 (on the plane)
Lx = 15/80 = 0.1875  =>  Lp=80*0.1875=15                ; sx= 80+15 = 95
Rx = -5/80 = -0.0625 =>  Rp=80*-0.0625=-5               ; sx= 80-5  = 75

Project to single frustum:
Ls = 80*(Lp-ex-cx)/(0-cz) = 80*(15-10)/80 = 5
Rs = 80*(Rp+ex-cx)/(0-cz) = 80*(-5+10)/80 = 5


Per dx plot routine?
~~~
Not as easy as it sounds.
Assume source width, say 256 pixels.
Given output width, generate code that optimally loads & plots those pixels...
Particularly difficult in MODE 9. Want to write words whenever possible.

For a given list of pixels [a,b,c,d,e,f,g,h,i]
Work out which word each one is in.
Load those words.
Mask out the pixels from those words.
Assemble into an output word.
Write the output word.

Worst case:
- 1x LDR word per pixel.
- Each pixel requires 1x AND plus 1x ORR + shift.
- Then write the word.

ldr r9!, {r0-r7}            ; 8c
and r10, r0, #M             ; 1c
orr r11, r11, r0, lsl #N    ; 1c
; repeat 7 more times       ; 14c
str r11, [r12], #4          ; 4c

; = 28c per output word = 3.5c per output pixel?

; Repeat 32 times for 256 pixel width.
; = 896c per row (round up to 2 scanlines per row.)
; (ARM2 ~= 512c per scanline.)

Fix this to always read 8 words then assemble 8 output pixels.
Until we need a new source word.
There's always going to be the case where the output word
spans two source words in different read batches...

Everything is consecutive, so can just work out min/max input word
at the start of each output word.

Write at word aligned boundary.
In our anaglyph case want to also mask in colour and mask to screen!

After all this, maybe we just want a vector font!!!
